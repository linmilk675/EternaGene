from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes


from bot.keyboards import get_back_to_main_menu_keyboard, get_back_to_gene_menu_keyboard, get_back_to_genes_keyboard, get_letter_keyboard, get_genes_by_letter_keyboard, get_main_menu_keyboard, get_database_menu_keyboard, get_interaction_menu_keyboard

from visualization.gene_network import build_interaction_graph, plot_interaction_graph
from loaders.genage_loader import load_genage_data
from loaders.ncbi_loader import fetch_gene_summary_ncbi
from loaders.ensembl_loader import fetch_ensembl_gene_info
from loaders.uniprot_loader import fetch_uniprot_summary
#from loaders.genecards_loader import fetch_genecards_summary
#from loaders.alliance_loader import fetch_alliance_gene_description
from loaders.string_loader import fetch_string_interactions


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_gene_selection = {}
    
# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–µ–Ω–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–∞—Ä–µ–Ω–∏–µ–º.",
        reply_markup=get_main_menu_keyboard()
    )


# –ì–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≥–µ–Ω—ã –æ–¥–∏–Ω —Ä–∞–∑
genage_df = load_genage_data()
genes_by_letter = {}
for symbol in genage_df["symbol"]:
    letter = symbol[0].upper()
    genes_by_letter.setdefault(letter, []).append(symbol)
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data = context.user_data

    if query.data == "show_genes":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É:", reply_markup=get_letter_keyboard())

    elif query.data.startswith("letter_"):
        letter = query.data.split("_")[1]
        user_data["selected_letter"] = letter #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –±—É–∫–≤—É
        genes = genes_by_letter.get(letter.upper(), [])
        if not genes:
            await query.edit_message_text("‚ùå–ù–µ—Ç –≥–µ–Ω–æ–≤ –Ω–∞ —ç—Ç—É –±—É–∫–≤—É.")
        else:
            await query.edit_message_text(
                f"üî§ –ì–µ–Ω—ã –Ω–∞ –±—É–∫–≤—É {letter.upper()}:", reply_markup=get_genes_by_letter_keyboard(genes, letter)
            )

    elif query.data.startswith("select_gene:"):
        gene = query.data.split(":")[1]
        context.user_data["selected_gene"] = gene
        await query.edit_message_text(f"‚úÖ –ì–µ–Ω {gene} –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:", reply_markup=get_database_menu_keyboard())
        
    elif query.data.startswith("db_"):
        db = query.data[3:]
        gene = context.user_data.get("selected_gene")
        if not gene:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–µ–Ω–∞.")
            return
        
        await query.edit_message_text(f"üîé –ó–∞–ø—Ä–æ—Å –≤ {db.upper()} –¥–ª—è –≥–µ–Ω–∞ {gene}...")

        if db == "ncbi":
            data = fetch_gene_summary_ncbi(gene)  # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
            summary = data.get("Summary", "Summary –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        elif db == "ensembl":
            ensembl_data = fetch_ensembl_gene_info(gene)
            summary = ensembl_data.get("description") if ensembl_data else None
        elif db == "uniprot":
            summary = fetch_uniprot_summary(gene)
        #elif db == "genecards":
        #   summary = fetch_genecards_summary(gene)
        #elif db == "alliance":
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —Ç—ã –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–∏–ª HGNC ID
         #   hgnc_id = f"HGNC:{gene}"  # –∏–ª–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
         #   summary = fetch_alliance_gene_description(hgnc_id)
        else:
            summary = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∞–∑–∞."

        await query.message.reply_text(summary or "‚ùóÔ∏è–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_back_to_gene_menu_keyboard())
    
    elif query.data == "back_to_letters":
        await query.edit_message_text("üî† –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –≥–µ–Ω–∞:", reply_markup=get_letter_keyboard())

    elif query.data == "back_to_genes":
        letter = user_data.get("selected_letter")
        if not letter:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –±—É–∫–≤–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
            return
        genes = genes_by_letter.get(letter.upper(), [])
        await query.edit_message_text(
            f"üî§ –ì–µ–Ω—ã –Ω–∞ –±—É–∫–≤—É {letter.upper()}:",
            reply_markup=get_genes_by_letter_keyboard(genes, letter)
        )

    elif query.data == "back_to_gene_menu":
        gene = user_data.get("selected_gene")
        if gene:
            await query.edit_message_text(
                f"‚úÖ –ì–µ–Ω {gene} –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:",
                reply_markup=get_database_menu_keyboard()
            )

    elif query.data == "show_interactions":
        gene = context.user_data.get("selected_gene")
        if not gene:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–µ–Ω–∞.")
            return
        
        interactions = fetch_string_interactions(gene)
        if not interactions:
            await query.edit_message_text("‚ùå –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            text = "\n".join([f"{gene} ‚Üî {i['partner']} (score: {i['score']})" for i in interactions])
            await query.edit_message_text(f"üîó –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n{text}")
            await query.message.reply_text(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=get_interaction_menu_keyboard()
            )

    elif query.data == "back_to_main":
        await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())

    elif query.data == "show_graph":
        gene = context.user_data.get("selected_gene")
        if not gene:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–µ–Ω–∞.")
            return

        await query.edit_message_text(f"üìä –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≥–µ–Ω–∞ {gene}...")

        import os

        G = build_interaction_graph(gene)
        if not G or G.number_of_edges() == 0:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ ‚Äî –Ω–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.")
            return

        save_path = "data/output_graph.png"
        os.makedirs(os.path.dirname(save_path), exist_ok=True)

        plot_interaction_graph(G, central_gene=gene, save_path=save_path)

        with open(save_path, "rb") as photo:
            await query.message.reply_photo(photo=photo, caption=f"–ì—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {gene}", reply_markup=get_back_to_main_menu_keyboard())

    


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–µ–Ω–∞
async def handle_gene_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gene = update.message.text.strip().upper()
    user_gene_selection[update.message.from_user.id] = gene
    await update.message.reply_text(
        f"‚úÖ –ì–µ–Ω {gene} –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=get_database_menu_keyboard()
    )

async def handle_graph_request(update, context):
    gene_name = context.user_data.get("selected_gene")
    if not gene_name:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω.")
        return

    await update.message.reply_text(f"–°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≥–µ–Ω–∞ {gene_name}...")

    G = build_interaction_graph(gene_name)
    if not G or G.number_of_edges() == 0:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ ‚Äî –Ω–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.")
        return

    save_path = "data/output_graph.png"
    os.makedirs(os.path.dirname(save_path), exist_ok=True)

    plot_interaction_graph(G, central_gene=gene_name, save_path=save_path)

    with open(save_path, "rb") as photo:
        await update.message.reply_photo(photo=photo, caption="–ì—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
        
